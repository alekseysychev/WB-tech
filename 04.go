package main

// Реализовать набор из N воркеров, которые читают
// из канала произвольные данные и выводят в stdout.
// Данные в канал пишутся из главного потока.
// Необходима возможность выбора кол-во воркеров при старте,
// а также способ завершения работы всех воркеров.

import (
	"fmt"
	"sync"
)

func main() {
	var wg sync.WaitGroup
	workerCount := 5 // количество одновременных воркеров
	// воркер
	// wn - номер воркера для визуального отображения в консоли
	// c - канал из которого происходит чтение
	worker := func(wn int, c <-chan int) {
		for v := range c {
			fmt.Printf("%d:%d ", wn, v)
		}
		wg.Done()
	}
	// канал для передачи данных
	ch := make(chan int, 1000)
	// запуск воркеров
	for i := 0; i < workerCount; i++ {
		wg.Add(1)
		go worker(i, ch)
	}
	// запись в канал случайных данных
	for i := 0; i < 100; i++ {
		ch <- i
	}
	// завершение всех воркеров, так как канал закрыт
	close(ch)
	wg.Wait()

	fmt.Printf("\n")
}
