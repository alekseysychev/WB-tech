4:       grep, egrep, fgrep, rgrep - print lines that match patterns
9:       grep [OPTION...] -f PATTERN_FILE ... [FILE...]
12:       grep  searches  for  PATTERNS  in  each  FILE.   PATTERNS is one or more patterns separated by newline characters, and grep prints each line that matches a pattern.
15:       A FILE of “-” stands for standard input.  If no FILE is given, recursive searches examine the working directory, and nonrecursive searches read standard input.
17:       In addition, the variant programs egrep, fgrep and rgrep are the same as grep -E, grep -F, and grep -r,  respectively.   These  variants  are  deprecated,  but  are
18:       provided for backward compatibility.
21:   Generic Program Information
25:              Output the version number of grep and exit.
31:       -F, --fixed-strings
32:              Interpret PATTERNS as fixed strings, not regular expressions.
35:              Interpret PATTERNS as basic regular expressions (BREs, see below).  This is the default.
39:              may warn of unimplemented features.
43:              Use PATTERNS as the patterns.  If this option is used multiple times or is combined with the -f (--file) option, search for all patterns given.  This  option
46:       -f FILE, --file=FILE
47:              Obtain  patterns from FILE, one per line.  If this option is used multiple times or is combined with the -e (--regexp) option, search for all patterns given.
48:              The empty file contains zero patterns, and therefore matches nothing.
51:              Ignore case distinctions in patterns and input data, so that characters that differ only in case match each other.
54:              Do not ignore case distinctions in patterns and input data.  This is the default.  This option is useful for passing to shell scripts that already use -i, to
55:              cancel its effects because the two options override each other.
58:              Invert the sense of matching, to select non-matching lines.
61:              Select  only  those  lines containing matches that form whole words.  The test is that the matching substring must either be at the beginning of the line, or
62:              preceded by a non-word constituent character.  Similarly, it must be either at the end of the line or followed by a non-word  constituent  character.   Word-
63:              constituent characters are letters, digits, and the underscore.  This option has no effect if -x is also specified.
69:       -y     Obsolete synonym for -i.
73:              Suppress normal output; instead print a count of matching lines for each input file.  With the -v, --invert-match  option  (see  below),  count  non-matching
77:              Surround  the  matched  (non-empty)  strings, matching lines, context lines, file names, line numbers, byte offsets, and separators (for fields and groups of
78:              context lines) with escape sequences to display them in color on the terminal.  The  colors  are  defined  by  the  environment  variable  GREP_COLORS.   The
81:       -L, --files-without-match
82:              Suppress normal output; instead print the name of each input file from which no output would normally have been printed.  The scanning will stop on the first
85:       -l, --files-with-matches
86:              Suppress normal output; instead print the name of each input file from which output would normally have been printed.  The scanning will stop  on  the  first
90:              Stop  reading  a file after NUM matching lines.  If the input is standard input from a regular file, and NUM matching lines are output, grep ensures that the
91:              standard input is positioned to just after the last matching line before exiting, regardless of the presence of  trailing  context  lines.   This  enables  a
92:              calling  process to resume a search.  When grep stops after NUM matching lines, it outputs any trailing context lines.  When the -c or --count option is also
93:              used, grep does not output a count greater than NUM.  When the -v or --invert-match option is also used, grep stops after outputting NUM non-matching lines.
96:              Print only the matched (non-empty) parts of a matching line, with each such part on a separate output line.
99:              Quiet; do not write anything to standard output.  Exit immediately with zero status if any match is found, even if an error was detected.  Also see the -s or
103:              Suppress error messages about nonexistent or unreadable files.
105:   Output Line Prefix Control
106:       -b, --byte-offset
107:              Print  the 0-based byte offset within the input file before each line of output.  If -o (--only-matching) is specified, print the offset of the matching part
108:              itself.
110:       -H, --with-filename
111:              Print the file name for each match.  This is the default when there is more than one file to search.
113:       -h, --no-filename
114:              Suppress the prefixing of file names on output.  This is the default when there is only one file (or only standard input) to search.
117:              Display input actually coming from standard input as input coming from file LABEL.  This can be useful for commands that transform a file's  contents  before
118:              searching, e.g., gzip -cd foo.gz | grep --label=foo -H 'some pattern'.  See also the -H option.
121:              Prefix each line of output with the 1-based line number within its input file.
124:              Make  sure  that the first character of actual line content lies on a tab stop, so that the alignment of tabs looks normal.  This is useful with options that
125:              prefix their output to the actual content: -H,-n, and -b.  In order to improve the probability that lines from a single file  will  all  start  at  the  same
126:              column, this also causes the line number and byte offset (if present) to be printed in a minimum size field width.
128:       -u, --unix-byte-offsets
129:              Report Unix-style byte offsets.  This switch causes grep to report byte offsets as if the file were a Unix-style text file, i.e., with CR characters stripped
130:              off.  This will produce results identical to running grep on a Unix machine.  This option has no effect unless -b option is also used; it has  no  effect  on
131:              platforms other than MS-DOS and MS-Windows.
134:              Output  a  zero  byte  (the ASCII NUL character) instead of the character that normally follows a file name.  For example, grep -lZ outputs a zero byte after
135:              each file name instead of the usual newline.  This option makes the output unambiguous, even in the presence of file names containing unusual characters like
136:              newlines.   This  option can be used with commands like find -print0, perl -0, sort -z, and xargs -0 to process arbitrary file names, even those that contain
140:       -A NUM, --after-context=NUM
141:              Print NUM lines of trailing context after matching lines.  Places a line containing a group separator (--) between contiguous groups of matches.  With the -o
142:              or --only-matching option, this has no effect and a warning is given.
144:       -B NUM, --before-context=NUM
145:              Print NUM lines of leading context before matching lines.  Places a line containing a group separator (--) between contiguous groups of matches.  With the -o
146:              or --only-matching option, this has no effect and a warning is given.
149:              Print NUM lines of output context.  Places a line containing a group separator (--) between contiguous groups of matches.  With  the  -o  or  --only-matching
150:              option, this has no effect and a warning is given.
154:              Process a binary file as if it were text; this is equivalent to the --binary-files=text option.
156:       --binary-files=TYPE
157:              If  a  file's data or metadata indicate that the file contains binary data, assume that the file is of type TYPE.  Non-text bytes indicate binary data; these
158:              are either output bytes that are improperly encoded for the current locale, or null input bytes when the -z option is not given.
160:              By default, TYPE is binary, and grep suppresses output after null input binary data is discovered,  and  suppresses  output  lines  that  contain  improperly
161:              encoded data.  When some output is suppressed, grep follows any output with a one-line message saying that a binary file matches.
163:              If  TYPE  is  without-match,  when  grep  discovers  null input binary data it assumes that the rest of the file does not match; this is equivalent to the -I
166:              If TYPE is text, grep processes a binary file as if it were text; this is equivalent to the -a option.
168:              When type is binary, grep may treat non-text bytes as line terminators even without the -z option.  This means choosing binary versus text can affect whether
169:              a pattern matches a file.  For example, when type is binary the pattern q$ might match q immediately followed by a null byte, even though this is not matched
172:              Warning: The -a option might output binary garbage, which can have nasty side effects if the output is a terminal and if the terminal driver interprets  some
173:              of  it  as  commands.   On  the  other  hand,  when  reading  files whose text encodings are unknown, it can be helpful to use -a or to set LC_ALL='C' in the
174:              environment, in order to find more matches even if the matches are unsafe for direct display.
177:              If an input file is a device, FIFO or socket, use ACTION to process it.  By default, ACTION is read, which means that devices are read just as if  they  were
178:              ordinary files.  If ACTION is skip, devices are silently skipped.
181:              If  an  input  file  is  a  directory, use ACTION to process it.  By default, ACTION is read, i.e., read directories just as if they were ordinary files.  If
182:              ACTION is skip, silently skip directories.  If ACTION is recurse, read all files under each directory, recursively, following symbolic links only if they are
186:              Skip  any  command-line file with a name suffix that matches the pattern GLOB, using wildcard matching; a name suffix is either the whole name, or a trailing
187:              part that starts with a non-slash character immediately after a slash (/) in the name.  When searching recursively, skip any subfile whose base name  matches
188:              GLOB;  the  base  name  is  the  part after the last slash.  A pattern can use *, ?, and [...] as wildcards, and \ to quote a wildcard or backslash character
191:       --exclude-from=FILE
192:              Skip files whose base name matches any of the file-name globs read from FILE (using wildcard matching as described under --exclude).
195:              Skip any command-line directory with a name suffix that matches the pattern GLOB.  When searching recursively, skip any subdirectory whose base name  matches
198:       -I     Process a binary file as if it did not contain matching data; this is equivalent to the --binary-files=without-match option.
201:              Search only files whose base name matches GLOB (using wildcard matching as described under --exclude).
204:              Read all files under each directory, recursively, following symbolic links only if they are on the command line.  Note that if no file operand is given, grep
207:       -R, --dereference-recursive
208:              Read all files under each directory, recursively.  Follow all symbolic links, unlike -r.
211:       --line-buffered
212:              Use line buffering on output.  This can cause a performance penalty.
215:              Treat the file(s) as binary.  By default, under MS-DOS and MS-Windows, grep guesses whether a file is text or binary  as  described  for  the  --binary-files
216:              option.   If grep decides the file is a text file, it strips the CR characters from the original file contents (to make regular expressions with ^ and $ work
217:              correctly).  Specifying -U overrules this guesswork, causing all files to be read and passed to the matching mechanism verbatim; if the file is a  text  file
218:              with CR/LF pairs at the end of each line, this will cause some regular expressions to fail.  This option has no effect on platforms other than MS-DOS and MS-
222:              Treat input and output data as sequences of lines, each terminated by a zero byte (the ASCII NUL character) instead of a newline.   Like  the  -Z  or  --null
223:              option, this option can be used with commands like sort -z to process arbitrary file names.
226:       A  regular  expression  is  a  pattern that describes a set of strings.  Regular expressions are constructed analogously to arithmetic expressions, by using various
229:       grep understands three different versions of regular expression syntax: “basic” (BRE), “extended” (ERE) and “perl” (PCRE).  In GNU grep there is  no  difference  in
230:       available  functionality  between  basic  and  extended syntaxes.  In other implementations, basic regular expressions are less powerful.  The following description
231:       applies to extended regular expressions; differences for basic regular expressions are summarized afterwards.  Perl-compatible regular expressions  give  additional
232:       functionality, and are documented in pcresyntax(3) and pcrepattern(3), but work only if PCRE is available in the system.
234:       The  fundamental  building  blocks  are  the  regular  expressions  that  match  a single character.  Most characters, including all letters and digits, are regular
237:       The period . matches any single character.  It is unspecified whether it matches an encoding error.
240:       A bracket expression is a list of characters enclosed by [ and ].  It matches any single character in that list.  If the first character of the list is the caret  ^
241:       then it matches any character not in the list; it is unspecified whether it matches an encoding error.  For example, the regular expression [0123456789] matches any
244:       Within a bracket expression, a range expression consists of two characters separated by a hyphen.  It matches any  single  character  that  sorts  between  the  two
245:       characters,  inclusive, using the locale's collating sequence and character set.  For example, in the default C locale, [a-d] is equivalent to [abcd].  Many locales
246:       sort characters in dictionary order, and in these locales [a-d] is typically not equivalent to [abcd]; it might be equivalent to [aBbCcDd], for example.  To  obtain
247:       the traditional interpretation of bracket expressions, you can use the C locale by setting the LC_ALL environment variable to the value C.
249:       Finally,  certain  named  classes  of  characters  are predefined within bracket expressions, as follows.  Their names are self explanatory, and they are [:alnum:],
251:       character  class  of  numbers and letters in the current locale.  In the C locale and ASCII character set encoding, this is the same as [0-9A-Za-z].  (Note that the
252:       brackets in these class names are part of the symbolic names, and must be included in addition to the brackets  delimiting  the  bracket  expression.)   Most  meta-
253:       characters  lose  their  special meaning inside bracket expressions.  To include a literal ] place it first in the list.  Similarly, to include a literal ^ place it
254:       anywhere but first.  Finally, to include a literal - place it last.
257:       The caret ^ and the dollar sign $ are meta-characters that respectively match the empty string at the beginning and end of a line.
260:       The symbols \< and \> respectively match the empty string at the beginning and end of a word.  The symbol \b matches the empty string at the edge of a word, and  \B
261:       matches the empty string provided it's not at the edge of a word.  The symbol \w is a synonym for [_[:alnum:]] and \W is a synonym for [^_[:alnum:]].
264:       A regular expression may be followed by one of several repetition operators:
274:       Two  regular expressions may be concatenated; the resulting regular expression matches any string formed by concatenating two substrings that respectively match the
278:       Two regular expressions may be joined by the infix operator |; the resulting regular expression matches any string matching either alternate expression.
282:       these precedence rules and form a subexpression.
284:   Back-references and Subexpressions
285:       The back-reference \n, where n is a single digit, matches the substring previously matched by the nth parenthesized subexpression of the regular expression.
291:       Normally the exit status is 0 if a line is selected, 1 if no lines were selected, and 2 if an error occurred.  However, if the -q or --quiet or --silent is used and
292:       a line is selected, the exit status is 0 even if an error occurred.
295:       The behavior of grep is affected by the following environment variables.
297:       The locale for category LC_foo is specified by examining the three environment variables LC_ALL, LC_foo, LANG, in that order.  The first of these variables that  is
298:       set  specifies  the  locale.   For  example, if LC_ALL is not set, but LC_MESSAGES is set to pt_BR, then the Brazilian Portuguese locale is used for the LC_MESSAGES
299:       category.  The C locale is used if none of these environment variables are set, if the locale catalog is not installed, or if grep was not  compiled  with  national
303:              This  variable  specifies default options to be placed in front of any explicit options.  As this causes problems when writing portable scripts, this feature
304:              will be removed in a future release of grep, and grep warns if it is used.  Please use an alias or script instead.
307:              This variable specifies the color used to highlight matched (non-empty) text.  It is deprecated in favor of GREP_COLORS, but still supported.   The  mt,  ms,
308:              and  mc  capabilities of GREP_COLORS have priority over it.  It can only specify the color used to highlight the matching non-empty text in any matching line
309:              (a selected line when the -v command-line option is omitted, or a context line when -v is  specified).   The  default  is  01;31,  which  means  a  bold  red
310:              foreground text on the terminal's default background.
313:              Specifies  the  colors and other attributes used to highlight various parts of the output.  Its value is a colon-separated list of capabilities that defaults
314:              to ms=01;31:mc=01;31:sl=:cx=:fn=35:ln=32:bn=32:se=36 with the rv and ne boolean capabilities omitted (i.e., false).  Supported capabilities are as follows.
316:              sl=    SGR substring for whole selected lines (i.e., matching lines when the -v command-line option is omitted, or non-matching lines when -v is  specified).
317:                     If  however the boolean rv capability and the -v command-line option are both specified, it applies to context matching lines instead.  The default is
318:                     empty (i.e., the terminal's default color pair).
320:              cx=    SGR substring for whole context lines (i.e., non-matching lines when the -v command-line option is omitted, or matching lines when -v  is  specified).
321:                     If  however  the  boolean  rv  capability  and  the -v command-line option are both specified, it applies to selected non-matching lines instead.  The
322:                     default is empty (i.e., the terminal's default color pair).
324:              rv     Boolean value that reverses (swaps) the meanings of the sl= and cx= capabilities when the -v command-line option is specified.  The default  is  false
328:                     SGR  substring  for  matching non-empty text in any matching line (i.e., a selected line when the -v command-line option is omitted, or a context line
329:                     when -v is specified).  Setting this is equivalent to setting both ms= and mc= at once to the same value.  The default is a bold red  text  foreground
333:                     SGR  substring for matching non-empty text in a selected line.  (This is only used when the -v command-line option is omitted.)  The effect of the sl=
334:                     (or cx= if rv) capability remains active when this kicks in.  The default is a bold red text foreground over the current line background.
337:                     SGR substring for matching non-empty text in a context line.  (This is only used when the -v command-line option is specified.)  The effect of the cx=
338:                     (or sl= if rv) capability remains active when this kicks in.  The default is a bold red text foreground over the current line background.
340:              fn=35  SGR substring for file names prefixing any content line.  The default is a magenta text foreground over the terminal's default background.
342:              ln=32  SGR substring for line numbers prefixing any content line.  The default is a green text foreground over the terminal's default background.
344:              bn=32  SGR substring for byte offsets prefixing any content line.  The default is a green text foreground over the terminal's default background.
346:              se=36  SGR  substring  for  separators  that  are inserted between selected line fields (:), between context line fields, (-), and between groups of adjacent
347:                     lines when nonzero context is specified (--).  The default is a cyan text foreground over the terminal's default background.
349:              ne     Boolean value that prevents clearing to the end of line using Erase in Line (EL) to Right (\33[K) each time a colorized item ends.  This is needed  on
350:                     terminals on which EL is not supported.  It is otherwise useful on terminals for which the back_color_erase (bce) boolean terminfo capability does not
351:                     apply, when the chosen highlight colors do not affect the background, or when EL is too slow or causes too much flicker.  The default is false  (i.e.,
354:              Note that boolean capabilities have no =... part.  They are omitted (i.e., false) by default and become true when specified.
356:              See  the  Select  Graphic  Rendition (SGR) section in the documentation of the text terminal that is used for permitted values and their meaning as character
357:              attributes.  These substring values are integers in decimal representation and can be concatenated with semicolons.  grep takes care of assembling the result
358:              into  a  complete  SGR  sequence  (\33[...m).   Common  values to concatenate include 1 for bold, 4 for underline, 5 for blink, 7 for inverse, 39 for default
359:              foreground color, 30 to 37 for foreground colors, 90 to 97 for 16-color mode  foreground  colors,  38;5;0  to  38;5;255  for  88-color  and  256-color  modes
360:              foreground  colors,  49  for default background color, 40 to 47 for background colors, 100 to 107 for 16-color mode background colors, and 48;5;0 to 48;5;255
361:              for 88-color and 256-color modes background colors.
364:              These variables specify the locale for the LC_COLLATE category, which determines the collating sequence used to interpret range expressions like [a-z].
367:              These variables specify the locale for the LC_CTYPE category, which determines the type of characters, e.g., which characters are whitespace.  This  category
372:              These variables specify the locale for the LC_MESSAGES category, which determines the language that grep uses  for  messages.   The  default  C  locale  uses
376:              If  set,  grep  behaves  as POSIX requires; otherwise, grep behaves more like other GNU programs.  POSIX requires that options that follow file names must be
377:              treated as file names; by default, such options are permuted to the front of the operand list  and  are  treated  as  options.   Also,  POSIX  requires  that
378:              unrecognized  options be diagnosed as “illegal”, but since they are not really against the law the default is to diagnose them as “invalid”.  POSIXLY_CORRECT
379:              also disables _N_GNU_nonoption_argv_flags_, described below.
381:       _N_GNU_nonoption_argv_flags_
382:              (Here N is grep's numeric process ID.)  If the ith character of this environment variable's value is 1, do not consider the ith operand  of  grep  to  be  an
383:              option,  even  if it appears to be one.  A shell can put this variable in the environment for each command it runs, specifying which operands are the results
384:              of file name wildcard expansion and therefore should not be treated as options.  This behavior is available only with  the  GNU  C  library,  and  only  when
388:       This man page is maintained only fitfully; the full documentation is often more up-to-date.
391:       Copyright 1998-2000, 2002, 2005-2020 Free Software Foundation, Inc.
393:       This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
397:       Email  bug  reports  to  the  bug-reporting  address  ⟨bug-grep@gnu.org⟩.   An  email  archive  ⟨https://lists.gnu.org/mailman/listinfo/bug-grep⟩  and a bug tracker
401:       Large repetition counts in the {n,m} construct may cause grep to use lots of memory.  In addition, certain other obscure  regular  expressions  require  exponential
402:       time and space, and may cause grep to run out of memory.
404:       Back-references are very slow, and may require exponential time.
407:       The following example outputs the location and contents of any line containing “f” and ending in “.c”, within all files in the current directory whose names contain
408:       “g” and end in “.h”.  The -n option outputs line numbers, the -- argument treats expansions of “*g*.h” starting with “-” as file names not options,  and  the  empty
409:       file /dev/null causes file names to be output even if only one file name happens to be of the form “*g*.h”.
411:         $ grep -n -- 'f.*\.c$' *g*.h /dev/null
412:         argmatch.h:1:/* definitions and prototypes for argmatch.c
414:       The  only  line  that  matches is line 1 of argmatch.h.  Note that the regular expression syntax used in the pattern differs from the globbing syntax that the shell
415:       uses to match file names.
419:       awk(1), cmp(1), diff(1), find(1), perl(1), sed(1), sort(1), xargs(1), read(2), pcre(3), pcresyntax(3), pcrepattern(3), terminfo(5), glob(7), regex(7).
422:       A complete manual ⟨https://www.gnu.org/software/grep/manual/⟩ is available.  If the info and grep programs are properly installed at your site, the command
424:              info grep
432:       find - search for files in a directory hierarchy
435:       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]
438:       This  manual  page  documents  the GNU version of find.  GNU find searches the directory tree rooted at each given starting-point by evaluating the given expression
439:       from left to right, according to the rules of precedence (see section OPERATORS), until the outcome is known (the left hand side is false for and  operations,  true
440:       for or), at which point find moves on to the next file name.  If no starting-point is specified, `.' is assumed.
442:       If  you  are  using find in an environment where security is important (for example if you are using it to search directories that are writable by other users), you
443:       should read the `Security Considerations' chapter of the findutils documentation, which is called Finding Files and comes with findutils.  That  document  also  in‐
444:       cludes a lot more detail and discussion than this manual page, so you may find it a more useful source of information.
447:       The -H, -L and -P options control the treatment of symbolic links.  Command-line arguments following these are taken to be names of files or directories to be exam‐
448:       ined, up to the first argument that begins with `-', or the argument `(' or `!'.  That argument and any following arguments are taken to be the expression  describ‐
449:       ing  what  is  to  be searched for.  If no paths are given, the current directory is used.  If no expression is given, the expression -print is used (but you should
452:       This manual page talks about `options' within the expression list.  These options control the behaviour of find but are specified immediately after  the  last  path
453:       name.   The  five  `real' options -H, -L, -P, -D and -O must appear before the first path name, if at all.  A double dash -- can also be used to signal that any re‐
454:       maining arguments are not options (though ensuring that all start points begin with either `./' or `/' is generally safer if you use wildcards in the list of  start
457:       -P     Never  follow symbolic links.  This is the default behaviour.  When find examines or prints information a file, and the file is a symbolic link, the informa‐
458:              tion used shall be taken from the properties of the symbolic link itself.
460:       -L     Follow symbolic links.  When find examines or prints information about files, the information used shall be taken from the properties of the  file  to  which
461:              the  link points, not from the link itself (unless it is a broken symbolic link or find is unable to examine the file to which the link points).  Use of this
462:              option implies -noleaf.  If you later use the -P option, -noleaf will still be in effect.  If -L is in effect and find discovers a symbolic link to a  subdi‐
465:              When  the  -L option is in effect, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link it‐
466:              self (unless the symbolic link is broken).  Actions that can cause symbolic links to become broken while find is executing (for  example  -delete)  can  give
467:              rise to confusing behaviour.  Using -L causes the -lname and -ilname predicates always to return false.
469:       -H     Do not follow symbolic links, except while processing the command line arguments.  When find examines or prints information about files, the information used
470:              shall be taken from the properties of the symbolic link itself.  The only exception to this behaviour is when a file specified on the command line is a  sym‐
471:              bolic  link,  and  the  link  can be resolved.  For that situation, the information used is taken from whatever the link points to (that is, the link is fol‐
472:              lowed).  The information about the link itself is used as a fallback if the file pointed to by the symbolic link cannot be examined.  If -H is in effect  and
473:              one of the paths specified on the command line is a symbolic link to a directory, the contents of that directory will be examined (though of course -maxdepth
476:       If more than one of -H, -L and -P is specified, each overrides the others; the last one appearing on the command line takes effect.  Since it is the default, the -P
477:       option should be considered to be in effect unless either -H or -L is specified.
479:       GNU find frequently stats files during the processing of the command line itself, before any searching has begun.  These options also affect how those arguments are
480:       processed.  Specifically, there are a number of tests that compare files listed on the command line against a file we are currently considering.  In each case,  the
481:       file  specified  on the command line will have been examined and some of its properties will have been saved.  If the named file is in fact a symbolic link, and the
482:       -P option is in effect (or if neither -H nor -L were specified), the information used for the comparison will be taken from the properties  of  the  symbolic  link.
483:       Otherwise,  it will be taken from the properties of the file the link points to.  If find cannot follow the link (for example because it has insufficient privileges
484:       or the link points to a nonexistent file) the properties of the link itself will be used.
486:       When the -H or -L options are in effect, any symbolic links listed as the argument of -newer will be dereferenced, and the timestamp will be taken from the file  to
489:       The  -follow  option has a similar effect to -L, though it takes effect at the point where it appears (that is, if -L is not used but -follow is, any symbolic links
490:       appearing after -follow on the command line will be dereferenced, and those before it will not).
493:              Print diagnostic information; this can be helpful to diagnose problems with why find is not doing what you want.  The list of debug options should  be  comma
494:              separated.   Compatibility  of the debug options is not guaranteed between releases of findutils.  For a complete list of valid debug options, see the output
495:              of find -D help.  Valid debug options include
497:              exec   Show diagnostic information relating to -exec, -execdir, -ok and -okdir
499:              opt    Prints diagnostic information relating to the optimisation of the expression tree; see the -O option.
501:              rates  Prints a summary indicating how often each predicate succeeded or failed.
505:              stat   Print messages as files are examined with the stat and lstat system calls.  The find program tries to minimise such calls.
507:              tree   Show the expression tree in its original and optimised form.
509:              all    Enable all of the other debug options (but help).
514:              Enables query optimisation.  The find program reorders tests to speed up execution while preserving the overall effect; that is, predicates with side effects
515:              are not reordered relative to each other.  The optimisations performed at each optimisation level are as follows.
519:              1      This  is the default optimisation level and corresponds to the traditional behaviour.  Expressions are reordered so that tests based only on the names
520:                     of files (for example -name and -regex) are performed first.
522:              2      Any -type or -xtype tests are performed after any tests based only on the names of files, but before any tests that require information from  the  in‐
523:                     ode.   On many modern versions of Unix, file types are returned by readdir() and so these predicates are faster to evaluate than predicates which need
524:                     to stat the file first.  If you use the -fstype FOO predicate and specify a filesystem type FOO which is not known (that is, present  in  `/etc/mtab')
525:                     at the time find starts, that predicate is equivalent to -false.
527:              3      At  this  optimisation level, the full cost-based query optimiser is enabled.  The order of tests is modified so that cheap (i.e. fast) tests are per‐
528:                     formed first and more expensive ones are performed later, if necessary.  Within each cost band, predicates are evaluated earlier or later according to
529:                     whether  they  are  likely  to succeed or not.  For -o, predicates which are likely to succeed are evaluated earlier, and for -a, predicates which are
530:                     likely to fail are evaluated earlier.
532:              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.  In some cases the probability takes account of the specific nature  of
533:              the test (for example, -type f is assumed to be more likely to succeed than -type c).  The cost-based optimiser is currently being evaluated.  If it does not
534:              actually improve the performance of find, it will be removed again.  Conversely, optimisations that prove to be reliable, robust and effective may be enabled
535:              at  lower  optimisation  levels  over time.  However, the default behaviour (i.e. optimisation level 1) will not be changed in the 4.3.x release series.  The
536:              findutils test suite runs all the tests on find at each optimisation level and ensures that the result is the same.
539:       The part of the command line after the list of starting points is the expression.  This is a kind of query specification describing how we match files and  what  we
540:       do with the files that were matched.  An expression is composed of a sequence of things:
542:       Tests  Tests  return  a  true or false value, usually on the basis of some property of a file we are considering.  The -empty test for example is true only when the
543:              current file is empty.
546:              Actions have side effects (such as printing something on the standard output) and return either true or false, usually based on whether or not they are  suc‐
547:              cessful.  The -print action for example prints the name of the current file on the standard output.
550:              Global  options  affect  the operation of tests and actions specified on any part of the command line.  Global options always return true.  The -depth option
551:              for example makes find traverse the file system in a depth-first order.
554:              Positional options affect only tests or actions which follow them.  Positional options always return true.  The -regextype option for example is  positional,
555:              specifying the regular expression dialect for regular expressions occurring later on the command line.
558:              Operators  join together the other items within the expression.  They include for example -o (meaning logical OR) and -a (meaning logical AND).  Where an op‐
561:       The -print action is performed on all files for which the whole expression is true, unless it contains an action other than -prune or -quit.  Actions which  inhibit
562:       the default -print are -delete, -exec, -execdir, -ok, -okdir, -fls, -fprint, -fprintf, -ls, -print and -printf.
567:       Positional options always return true.  They affect only tests occurring later on the command line.
570:              Measure  times  (for  -amin,  -atime,  -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather than from 24 hours ago.  This option only affects
573:       -follow
574:              Deprecated; use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow option affects only those tests which appear after  it  on
575:              the command line.  Unless the -H or -L option has been specified, the position of the -follow option changes the behaviour of the -newer predicate; any files
576:              listed as the argument of -newer will be dereferenced if they are symbolic links.  The same consideration applies to -newerXY, -anewer  and  -cnewer.   Simi‐
577:              larly,  the  -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself.  Using -follow causes
578:              the -lname and -ilname predicates always to return false.
582:              are  known,  use  -regextype help.  The Texinfo documentation (see SEE ALSO) explains the meaning of and differences between the various types of regular ex‐
586:              Turn warning messages on or off.  These warnings apply only to the command line usage, not to any conditions that find might encounter when it  searches  di‐
587:              rectories.   The  default behaviour corresponds to -warn if standard input is a tty, and to -nowarn otherwise.  If a warning message relating to command-line
588:              usage is produced, the exit status of find is not affected.  If the POSIXLY_CORRECT environment variable is set, and -warn is also used, it is not  specified
589:              which, if any, warnings will be active.
592:       Global  options always return true.  Global options take effect even for tests which occur earlier on the command line.  To prevent confusion, global options should
593:       specified on the command-line after the list of start points, just before the first test, positional option or action.  If you specify a global option in some other
594:       place, find will issue a warning message explaining that this can be confusing.
596:       The global options occur after the list of start points, and so are not the same kind of option as -L, for example.
598:       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.
600:       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.
603:              Print a summary of the command-line usage of find and exit.
606:              Normally,  find  will emit an error message when it fails to stat a file.  If you give this option and a file is deleted between the time find reads the name
607:              of the file from the directory and the time it tries to stat the file, no error message will be issued.  This also applies  to  files  or  directories  whose
608:              names  are  given  on  the  command  line.  This option takes effect at the time the command line is read, which means that you cannot search one part of the
609:              filesystem with this option on and part of it with this option off (if you need to do that, you will need to issue two find commands instead,  one  with  the
612:              Furthermore,  find with the -ignore_readdir_race option will ignore errors of the -delete action in the case the file has disappeared since the parent direc‐
613:              tory was read: it will not output an error diagnostic, and the return code of the -delete action will be true.
616:              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  -maxdepth 0 means only apply the tests and actions  to  the
620:              Do not apply any tests or actions at levels less than levels (a non-negative integer).  -mindepth 1 means process all files except the starting-points.
622:       -mount Don't descend directories on other filesystems.  An alternate name for -xdev, for compatibility with some other versions of find.
625:              Turns off the effect of -ignore_readdir_race.
627:       -noleaf
628:              Do  not  optimize  by  assuming that directories contain 2 fewer subdirectories than their hard link count.  This option is needed when searching filesystems
629:              that do not follow the Unix directory-link convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount points.  Each  directory  on  a  normal  Unix
630:              filesystem has at least 2 hard links: its name and its `.' entry.  Additionally, its subdirectories (if any) each have a `..' entry linked to that directory.
631:              When find is examining a directory, after it has statted 2 fewer subdirectories than the directory's link count, it knows that the rest of the entries in the
632:              directory  are non-directories (`leaf' files in the directory tree).  If only the files' names need to be examined, there is no need to stat them; this gives
633:              a significant increase in search speed.
636:              Print the find version number and exit.
638:       -xdev  Don't descend directories on other filesystems.
641:       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and some reference file specified on  the  command  line.
642:       When  these  tests are used, the interpretation of the reference file is determined by the options -H, -L and -P and any previous -follow, but the reference file is
643:       only examined once, at the time the command line is parsed.  If the reference file cannot be examined (for example, the stat(2) system call fails for it), an  error
644:       message is issued, and find exits with a nonzero status.
646:       Numeric arguments can be specified as
648:       +n     for greater than n,
650:       -n     for less than n,
652:       n      for exactly n.
657:       -anewer reference
658:              Time  of  the  last access of the current file is more recent than that of the last data modification of the reference file.  If reference is a symbolic link
659:              and the -H option or the -L option is in effect, then the time of the last data modification of the file it points to is always used.
662:              File was last accessed n*24 hours ago.  When find figures out how many 24-hour periods ago the file was last accessed, any fractional part is ignored, so  to
663:              match -atime +1, a file has to have been accessed at least two days ago.
668:       -cnewer reference
669:              Time  of the last status change of the current file is more recent than that of the last data modification of the reference file.  If reference is a symbolic
670:              link and the -H option or the -L option is in effect, then the time of the last data modification of the file it points to is always used.
673:              File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects  the  interpretation  of  file  status  change
676:       -empty File is empty and is either a regular file or a directory.
679:              Matches  files  which are executable and directories which are searchable (in a file name resolution sense) by the current user.  This takes into account ac‐
680:              cess control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be  fooled  by
681:              NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping
682:              information held on the server.  Because this test is based only on the result of the access(2) system call, there is no guarantee that a file for which this
685:       -false Always false.
687:       -fstype type
688:              File  is on a filesystem of type type.  The valid filesystem types vary among different versions of Unix; an incomplete list of filesystem types that are ac‐
689:              cepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf with the %F directive to see the types  of  your
690:              filesystems.
698:              Like  -lname,  but  the  match is case insensitive.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is
702:              Like -name, but the match is case insensitive.  For example, the patterns `fo*' and `F??' match the file names `Foo', `FOO', `foo', `fOo', etc.  The  pattern
703:              `*foo*` will also match a file called '.foobar'.
706:              File has inode number n.  It is normally easier to use the -samefile test instead.
721:              File  is  a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat `/' or `.' specially.  If the -L option or the -follow
722:              option is in effect, this test returns false unless the symbolic link is broken.
725:              File's data was last modified n minutes ago.
728:              File's data was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file modification times.
731:              Base of file name (the path with the leading directories removed) matches shell pattern pattern.  Because the leading directories are removed, the file names
732:              considered  for  a match with -name will never include a slash, so `-name a/b' will never match anything (you probably need to use -path instead).  A warning
733:              is issued if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match a `.' at the start of
734:              the  base  name  (this  is  a  change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a directory and the files under it, use -prune
735:              rather than checking every file in the tree; see an example in the description of that action.  Braces are not recognised as being special, despite the  fact
736:              that some shells including Bash imbue braces with a special meaning in shell patterns.  The filename matching is performed with the use of the fnmatch(3) li‐
737:              brary function.  Don't forget to enclose the pattern in quotes in order to protect it from expansion by the shell.
739:       -newer reference
740:              Time of the last data modification of the current file is more recent than that of the last data modification of the reference file.  If reference is a  sym‐
741:              bolic link and the -H option or the -L option is in effect, then the time of the last data modification of the file it points to is always used.
743:       -newerXY reference
744:              Succeeds  if  timestamp X of the file being considered is newer than timestamp Y of the file reference.  The letters X and Y can be any of the following let‐
747:              a   The access time of the file reference
748:              B   The birth time of the file reference
749:              c   The inode status change time of reference
750:              m   The modification time of the file reference
751:              t   reference is interpreted directly as a time
753:              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not implemented on all systems; for example  B  is  not  sup‐
754:              ported  on  all systems.  If an invalid or unsupported combination of XY is specified, a fatal error results.  Time specifications are interpreted as for the
755:              argument to the -d option of GNU date.  If you try to use the birth time of a reference file, and the birth time cannot be determined, a fatal error  message
756:              results.  If you specify a test which refers to the birth time of files being examined, this test will fail for any files where the birth time is unknown.
759:              No group corresponds to file's numeric group ID.
762:              No user corresponds to file's numeric user ID.
765:              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for example,
766:                        find . -path "./sr*sc"
767:              will print an entry for a directory called `./src/misc' (if one exists).  To ignore a whole directory tree, use -prune rather than checking every file in the
768:              tree.  Note that the pattern match test applies to the whole file name, starting from one of the start points named on the command line.  It would only  make
769:              sense to use an absolute path name here if the relevant start point is also an absolute path.  This means that this command will never match anything:
770:                        find bar -path /foo/bar/myfile -print
771:              Find compares the -path argument with the concatenation of a directory name and the base name of the file it's examining.  Since the concatenation will never
772:              end with a slash, -path arguments ending in a slash will match nothing (except perhaps a start point specified on the command line).  The predicate -path  is
773:              also supported by HP-UX find and is part of the POSIX 2008 standard.
776:              File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want to use this form for symbolic modes, you may have
777:              to specify a rather complex mode string.  For example `-perm g=w' will only match files which have mode 0020 (that is, ones for which group write  permission
778:              is  the  only permission set).  It is more likely that you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file with group
779:              write permission.  See the EXAMPLES section for some illustrative examples.
782:              All of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is usually the way in which you would want  to  use
783:              them.  You must specify `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.
786:              Any  of  the  permission  bits  mode are set for the file.  Symbolic modes are accepted in this form.  You must specify `u', `g' or `o' if you use a symbolic
787:              mode.  See the EXAMPLES section for some illustrative examples.  If no permission bits in mode are set, this test matches any file (the idea here  is  to  be
788:              consistent with the behaviour of -perm -000).
794:              Matches  files which are readable by the current user.  This takes into account access control lists and other permissions artefacts which the -perm test ig‐
795:              nores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing),  since  many  systems
796:              implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.
799:              File  name  matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a file named `./fubar3', you can use
800:              the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular expressions understood by find are by default Emacs  Regular  Expressions  (except
803:       -samefile name
804:              File refers to the same inode as name.  When -L is in effect, this can include symbolic links.
807:              File uses n units of space, rounding up.  The following suffixes can be used:
809:              `b'    for 512-byte blocks (this is the default if no suffix is used)
811:              `c'    for bytes
813:              `w'    for two-byte words
815:              `k'    for kibibytes (KiB, units of 1024 bytes)
817:              `M'    for mebibytes (MiB, units of 1024 * 1024 = 1048576 bytes)
819:              `G'    for gibibytes (GiB, units of 1024 * 1024 * 1024 = 1073741824 bytes)
821:              The  size is simply the st_size member of the struct stat populated by the lstat (or stat) system call, rounded up as shown above.  In other words, it's con‐
822:              sistent with the result you get for ls -l.  Bear in mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suffix
823:              always denotes 512-byte blocks and never 1024-byte blocks, which is different to the behaviour of -ls.
825:              The  +  and - prefixes signify greater than and less than, as usual; i.e., an exact size of n units does not match.  Bear in mind that the size is rounded up
826:              to the next unit.  Therefore -size -1M is not equivalent to -size -1048576c.  The former only matches empty  files,  the  latter  matches  files  from  0  to
832:              File is of type c:
834:              b      block (buffered) special
836:              c      character (unbuffered) special
842:              f      regular file
844:              l      symbolic  link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.  If you want to search for
845:                     symbolic links when -L is in effect, use -xtype.
851:              To search for more than one type at once, you can supply the combined list of type letters separated by a comma `,' (GNU extension).
856:              File was last accessed n days after its status was last changed.
865:              Matches files which are writable by the current user.  This takes into account access control lists and other permissions artefacts which the -perm test  ig‐
866:              nores.   This  test  makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems
867:              implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.
870:              The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was specified, true if the file is a link to a file of type
871:              c; if the -L option has been given, true if c is `l'.  In other words, for symbolic links, -xtype checks the type of the file that -type does not check.
874:              (SELinux only) Security context of the file matches glob pattern.
878:              Delete  files;  true if removal succeeded.  If the removal failed, an error message is issued.  If -delete fails, find's exit status will be nonzero (when it
879:              eventually exits).  Use of -delete automatically turns on the `-depth' option.
881:              Warnings: Don't forget that the find command line is evaluated as an expression, so putting -delete first will make find try to delete everything  below  the
882:              starting  points you specified.  When testing a find command line that you later intend to use with -delete, you should explicitly specify -depth in order to
883:              avoid later surprises.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.
885:              Together with the -ignore_readdir_race option, find will ignore errors of the -delete action in the case the file has disappeared since the parent  directory
886:              was read: it will not output an error diagnostic, and the return code of the -delete action will be true.
889:              Execute  command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an argument consisting of `;'
890:              is encountered.  The string `{}' is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in argu‐
891:              ments  where  it is alone, as in some versions of find.  Both of these constructions might need to be escaped (with a `\') or quoted to protect them from ex‐
892:              pansion by the shell.  See the EXAMPLES section for examples of the use of the -exec option.  The specified command is run once for each matched  file.   The
893:              command  is executed in the starting directory.  There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir op‐
897:              This variant of the -exec action runs the specified command on the selected files, but the command line is built by appending each selected file name at  the
898:              end;  the total number of invocations of the command will be much less than the number of matched files.  The command line is built in much the same way that
899:              xargs builds its command lines.  Only one instance of `{}' is allowed within the command, and (when find is being invoked from a shell) it should  be  quoted
900:              (for example, '{}') to protect it from interpretation by shells.  The command is executed in the starting directory.  If any invocation with the `+' form re‐
901:              turns a non-zero value as exit status, then find returns a non-zero exit status.  If find encounters an error, this can sometimes cause an immediate exit, so
902:              some pending commands may not be run at all.  This variant of -exec always returns true.
907:              Like  -exec,  but  the  specified  command is run from the subdirectory containing the matched file, which is not normally the directory in which you started
908:              find.  As with -exec, the {} should be quoted if find is being invoked from a shell.  This a much more secure method for invoking commands, as it avoids race
909:              conditions during resolution of the paths to the matched files.  As with the -exec action, the `+' form of -execdir will build a command line to process more
910:              than one matched file, but any given invocation of command will only list files that exist in the same subdirectory.  If you use this option, you must ensure
911:              that  your $PATH environment variable does not reference `.'; otherwise, an attacker can run any commands they like by leaving an appropriately-named file in
912:              a directory in which you will run -execdir.  The same applies to having entries in $PATH which are empty or which are not absolute directory names.   If  any
913:              invocation  with the `+' form returns a non-zero value as exit status, then find returns a non-zero exit status.  If find encounters an error, this can some‐
914:              times cause an immediate exit, so some pending commands may not be run at all.  The result of the action depends on whether the + or the ; variant  is  being
915:              used; -execdir command {} + always returns true, while -execdir command {} ; returns true only if command returns 0.
917:       -fls file
918:              True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section
919:              for information about how unusual characters in filenames are handled.
921:       -fprint file
922:              True; print the full file name into file file.  If file does not exist when find is run, it is created; if it does exist, it is truncated.   The  file  names
923:              `/dev/stdout'  and `/dev/stderr' are handled specially; they refer to the standard output and standard error output, respectively.  The output file is always
924:              created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.
926:       -fprint0 file
927:              True; like -print0 but write to file like -fprint.  The output file is always created, even if the predicate is never matched.   See  the  UNUSUAL  FILENAMES
928:              section for information about how unusual characters in filenames are handled.
930:       -fprintf file format
931:              True;  like  -printf  but  write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES
932:              section for information about how unusual characters in filenames are handled.
934:       -ls    True; list current file in ls -dils format on standard output.  The block counts are of 1 KB blocks, unless the environment variable POSIXLY_CORRECT is  set,
935:              in which case 512-byte blocks are used.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.
938:              Like  -exec  but  ask the user first.  If the user agrees, run the command.  Otherwise just return false.  If the command is run, its standard input is redi‐
939:              rected from /dev/null.
941:              The response to the prompt is matched against a pair of regular expressions to determine if it is an affirmative or negative response.  This regular  expres‐
942:              sion  is  obtained from the system if the `POSIXLY_CORRECT' environment variable is set, or otherwise from find's message translations.  If the system has no
943:              suitable definition, find's own definition will be used.  In either case, the interpretation of the regular expression itself will be affected by  the  envi‐
947:              Like  -execdir  but ask the user first in the same way as for -ok.  If the user does not agree, just return false.  If the command is run, its standard input
948:              is redirected from /dev/null.
950:       -print True; print the full file name on the standard output, followed by a newline.  If you are piping the output of find into another program  and  there  is  the
951:              faintest  possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead
952:              of -print.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.
955:              True; print the full file name on the standard output, followed by a null character (instead of the newline character that -print uses).   This  allows  file
956:              names  that  contain newlines or other types of white space to be correctly interpreted by programs that process the find output.  This option corresponds to
957:              the -0 option of xargs.
959:       -printf format
960:              True; print format on the standard output, interpreting `\' escapes and `%' directives.  Field widths and precisions can be specified as with the `printf'  C
961:              function.   Please  note  that  many  of the fields are printed as %s rather than %d, and this may mean that flags don't work as you might expect.  This also
962:              means that the `-' flag does work (it forces fields to be left-aligned).  Unlike -print, -printf does not add a newline at the end of the  string.   The  es‐
969:              \c     Stop printing from this format immediately and flush the output.
971:              \f     Form feed.
987:              A `\' character followed by any other character is treated as an ordinary character, so they both are printed.
991:              %a     File's last access time in the format returned by the C `ctime' function.
993:              %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the C `strftime' function.  The possible values for k are
994:                     listed below; some of them might not be available on all systems, due to differences in `strftime' between systems.
996:                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.
998:                     Time fields:
1014:                     S      Second (00.00 .. 61.00).  There is a fractional part.
1018:                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The time is  given  in  the  current  timezone
1019:                            (which may be affected by setting the TZ environment variable).  The seconds field includes a fractional part.
1021:                     X      locale's time representation (H:M:S).  The seconds field includes a fractional part.
1023:                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable
1025:                     Date fields:
1029:                     A      locale's full weekday name, variable length (Sunday..Saturday)
1033:                     B      locale's full month name, variable length (January..December)
1035:                     c      locale's  date and time (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and so to preserve compatibility with that for‐
1036:                            mat, there is no fractional part in the seconds field.
1038:                     d      day of month (01..31)
1044:                     j      day of year (001..366)
1048:                     U      week number of year with Sunday as first day of week (00..53)
1050:                     w      day of week (0..6)
1052:                     W      week number of year with Monday as first day of week (00..53)
1056:                     y      last two digits of year (00..99)
1060:              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples of the filesystem block size this is  usu‐
1061:                     ally greater than %s/512, but it can also be smaller if the file is a sparse file.
1063:              %c     File's last status change time in the format returned by the C `ctime' function.
1065:              %Ck    File's last status change time in the format specified by k, which is the same as for %A.
1067:              %d     File's depth in the directory tree; 0 means the file is a starting-point.
1069:              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.
1071:              %f     File's name with any leading directories removed (only the last element).
1073:              %F     Type of the filesystem the file is on; this value can be used for -fstype.
1075:              %g     File's group name, or numeric group ID if the group has no name.
1079:              %h     Leading  directories  of  file's  name (all but the last element).  If the file name contains no slashes (since it is in the current directory) the %h
1080:                     specifier expands to `.'.
1082:              %H     Starting-point under which file was found.
1086:              %k     The amount of disk space used for this file in 1 KB blocks.  Since disk space is allocated in multiples of the filesystem block size this  is  usually
1087:                     greater than %s/1024, but it can also be smaller if the file is a sparse file.
1089:              %l     Object of symbolic link (empty string if file is not a symbolic link).
1091:              %m     File's permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementations use, but if your particular implementa‐
1092:                     tion uses an unusual ordering of octal permissions bits, you will see a difference between the actual value of the file's mode and the output  of  %m.
1093:                     Normally you will want to have a leading zero on this number, and to do this, you should use the # flag (as in, for example, `%#m').
1095:              %M     File's permissions (in symbolic form, as for ls).  This directive is supported in findutils 4.2.5 and later.
1097:              %n     Number of hard links to file.
1101:              %P     File's name with the name of the starting-point under which it was found removed.
1105:              %S     File's  sparseness.   This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you will get for an ordinary file of a certain length is
1106:                     system-dependent.  However, normally sparse files will have values less than 1.0, and files which use indirect  blocks  may  have  a  value  which  is
1107:                     greater  than 1.0.  In general the number of blocks used by a file is file system dependent.  The value used for BLOCKSIZE is system-dependent, but is
1108:                     usually 512 bytes.  If the file size is zero, the value printed is undefined.  On systems which lack support for st_blocks, a file's sparseness is as‐
1111:              %t     File's last modification time in the format returned by the C `ctime' function.
1113:              %Tk    File's last modification time in the format specified by k, which is the same as for %A.
1115:              %u     File's user name, or numeric user ID if the user has no name.
1121:              %Y     File's type (like %y), plus follow symlinks: `L'=loop, `N'=nonexistent, `?' for any other error when determining the type of the symlink target.
1123:              %Z     (SELinux only) file's security context.
1126:                     Reserved for future use.
1128:              A `%' character followed by any other character is discarded, but the other character is printed (don't rely on this, as further format characters may be in‐
1129:              troduced).  A `%' at the end of the format argument causes undefined behaviour since there is no following character.  In some locales, it may hide your door
1130:              keys, while in others it may remove the final page from the novel you are reading.
1132:              The  %m and %d directives support the # , 0 and + flags, but the other directives do not, even if they print numbers.  Numeric directives that do not support
1133:              these flags include G, U, b, D, k and n.  The `-' format flag is supported and changes the alignment of a field from right-justified (which is  the  default)
1134:              to left-justified.
1136:              See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.
1138:       -prune True;  if  the  file is a directory, do not descend into it.  If -depth is given, then -prune has no effect.  Because -delete implies -depth, you cannot use‐
1139:              fully use -prune and -delete together.
1140:                For example, to skip the directory `src/emacs' and all files and directories under it, and print the names of the other  files  found,  do  something  like
1142:                        find . -path ./src/emacs -prune -o -print
1144:       -quit  Exit  immediately.   No  child processes will be left running, but no more paths specified on the command line will be processed.  For example, find /tmp/foo
1145:              /tmp/bar -print -quit will print only /tmp/foo.  Any command lines which have been built up with -execdir ... {} + will be invoked before  find  exits.   The
1149:       Listed in order of decreasing precedence:
1152:              Force  precedence.   Since  parentheses  are  special to the shell, you will normally need to quote them.  Many of the examples in this manual page use back‐
1153:              slashes for this purpose: `\(...\)' instead of `(...)'.
1155:       ! expr True if expr is false.  This character will also usually need protection from interpretation by the shell.
1161:              Two expressions in a row are taken to be joined with an implied -a; expr2 is not evaluated if expr1 is false.
1170:              Or; expr2 is not evaluated if expr1 is true.
1176:              List; both expr1 and expr2 are always evaluated.  The value of expr1 is discarded; the value of the list is the value of expr2.  The comma  operator  can  be
1177:              useful  for  searching  for several different types of thing, but traversing the filesystem hierarchy only once.  The -fprintf action can be used to list the
1178:              various matched items into several different output files.
1180:       Please note that -a when specified implicitly (for example by two tests appearing without an explicit operator between them) or  explicitly  has  higher  precedence
1181:       than -o.  This means that find . -name afile -o -name bfile -print will never print afile.
1184:       Many  of  the  actions of find result in the printing of data which is under the control of other users.  This includes file names, sizes, modification times and so
1185:       forth.  File names are a potential problem since they can contain any character except `\0' and `/'.  Unusual characters in file names can do unexpected  and  often
1186:       undesirable  things  to  your  terminal (for example, changing the settings of your function keys on some terminals).  Unusual characters are handled differently by
1189:       -print0, -fprint0
1190:              Always print the exact filename, unchanged, even if the output is going to a terminal.
1192:       -ls, -fls
1193:              Unusual characters are always escaped.  White space, backslash, and double quote characters are printed using C-style  escaping  (for  example  `\f',  `\"').
1194:              Other  unusual  characters  are  printed  using an octal escape.  Other printable characters (for -ls and -fls these are the characters between octal 041 and
1197:       -printf, -fprintf
1198:              If the output is not going to a terminal, it is printed as-is.  Otherwise, the result depends on which directive is in use.  The directives %D, %F,  %g,  %G,
1199:              %H,  %Y,  and %y expand to values which are not under control of files' owners, and so are printed as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M, %n,
1200:              %s, %t, %u and %U have values which are under the control of files' owners but which cannot be used to send arbitrary data to the terminal, and so these  are
1201:              printed  as-is.   The  directives  %f,  %h, %l, %p and %P are quoted.  This quoting is performed in the same way as for GNU ls.  This is not the same quoting
1202:              mechanism as the one used for -ls and -fls.  If you are able to decide what format to use for the output of find then it is normally better to use `\0' as  a
1203:              terminator  than to use newline, as file names can contain white space and newline characters.  The setting of the `LC_CTYPE' environment variable is used to
1206:       -print, -fprint
1207:              Quoting is handled in the same way as for -printf and -fprintf.  If you are using find in a script or in a situation where the matched files might have arbi‐
1208:              trary names, you should consider using -print0 instead of -print.
1210:       The -ok and -okdir actions print the current filename as-is.  This may change in a future release.
1213:       For  closest  compliance  to the POSIX standard, you should set the POSIXLY_CORRECT environment variable.  The following options are specified in the POSIX standard
1220:       -name  This option is supported, but POSIX conformance depends on the POSIX conformance of the system's fnmatch(3) library function.  As of  findutils-4.2.2,  shell
1221:              metacharacters  (`*',  `?' or `[]' for example) will match a leading `.', because IEEE PASC interpretation 126 requires this.  This is a change from previous
1222:              versions of findutils.
1224:       -type  Supported.  POSIX specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also supports `D', representing a Door, where the OS  provides  these.   Further‐
1225:              more, GNU find allows multiple types to be specified at once in a comma-separated list.
1227:       -ok    Supported.   Interpretation of the response is according to the `yes' and `no' patterns selected by setting the `LC_MESSAGES' environment variable.  When the
1228:              `POSIXLY_CORRECT' environment variable is set, these patterns are taken system's definition of a positive (yes) or negative (no) response.  See the  system's
1229:              documentation  for  nl_langinfo(3), in particular YESEXPR and NOEXPR.  When `POSIXLY_CORRECT' is not set, the patterns are instead taken from find's own mes‐
1232:       -newer Supported.  If the file specified is a symbolic link, it is always dereferenced.  This is a change from previous behaviour, which used to take  the  relevant
1233:              time from the symbolic link; see the HISTORY section below.
1235:       -perm  Supported.   If  the  POSIXLY_CORRECT  environment variable is not set, some mode arguments (for example +a+x) which are not valid in POSIX are supported for
1241:       The POSIX standard specifies parentheses `(', `)', negation `!' and the `and' and `or' operators ( -a, -o).
1243:       All other options, predicates, expressions and so forth are extensions beyond the POSIX standard.  Many of these extensions are not unique to GNU find, however.
1245:       The POSIX standard requires that find detects loops:
1247:              The find utility shall detect infinite loops; that is, entering a previously visited directory that is an ancestor of the last file encountered.  When it de‐
1248:              tects an infinite loop, find shall write a diagnostic message to standard error and shall either recover its position in the hierarchy or terminate.
1250:       GNU  find  complies  with these requirements.  The link count of directories which contain entries which are hard links to an ancestor will often be lower than they
1251:       otherwise should be.  This can mean that GNU find will sometimes optimise away the visiting of a subdirectory which is actually a link to an ancestor.   Since  find
1252:       does  not  actually  enter  such a subdirectory, it is allowed to avoid emitting a diagnostic message.  Although this behaviour may be somewhat confusing, it is un‐
1253:       likely that anybody actually depends on this behaviour.  If the leaf optimisation has been turned off with -noleaf, the directory entry will always be examined  and
1254:       the diagnostic message will be issued where it is appropriate.  Symbolic links cannot be used to create filesystem cycles as such, but if the -L option or the -fol‐
1255:       low option is in use, a diagnostic message is issued when find encounters a loop of symbolic links.  As with loops containing hard links, the leaf optimisation will
1256:       often mean that find knows that it doesn't need to call stat() or chdir() on the symbolic link, so this diagnostic is frequently not necessary.
1258:       The -d option is supported for compatibility with various BSD systems, but you should use the POSIX-compliant option -depth instead.
1260:       The POSIXLY_CORRECT environment variable does not affect the behaviour of the -regex or -iregex tests because those tests aren't specified in the POSIX standard.
1263:       LANG   Provides a default value for the internationalization variables that are unset or null.
1265:       LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.
1268:              The POSIX standard specifies that this variable affects the pattern matching to be used for the -name option.  GNU find uses the fnmatch(3) library function,
1269:              and so support for `LC_COLLATE' depends on the system library.  This variable also affects the interpretation of the response to -ok; while the `LC_MESSAGES'
1270:              variable  selects  the actual pattern used to interpret the response to -ok, the interpretation of any bracket expressions in the pattern will be affected by
1274:              This variable affects the treatment of character classes used in regular expressions and also with the -name test, if the system's fnmatch(3)  library  func‐
1275:              tion  supports this.  This variable also affects the interpretation of any character classes in the regular expressions used to interpret the response to the
1276:              prompt issued by -ok.  The `LC_CTYPE' environment variable will also affect which characters are considered to be unprintable when filenames are printed; see
1280:              Determines  the locale to be used for internationalised messages.  If the `POSIXLY_CORRECT' environment variable is set, this also determines the interpreta‐
1281:              tion of the response to the prompt made by the -ok action.
1284:              Determines the location of the internationalisation message catalogues.
1286:       PATH   Affects the directories which are searched to find the executables invoked by -exec, -execdir, -ok and -okdir.
1289:              Determines the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks are units of 512 bytes.  Otherwise they are units of 1024 bytes.
1291:              Setting this variable also turns off warning messages (that is, implies -nowarn) by default, because POSIX requires that apart from the output for  -ok,  all
1294:              When  POSIXLY_CORRECT  is  not  set, -perm +zzz is treated just like -perm /zzz if +zzz is not a valid symbolic mode.  When POSIXLY_CORRECT is set, such con‐
1298:              cording to find's own message translations.
1300:       TZ     Affects the time zone used for some of the time-related format directives of -printf and -fprintf.
1303:       find /tmp -name core -type f -print | xargs /bin/rm -f
1305:       Find  files  named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are any filenames containing newlines, single
1308:       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f
1310:       Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or directory names containing  single  or  double
1311:       quotes, spaces or newlines are correctly handled.  The -name test comes before the -type test in order to avoid having to call stat(2) on every file.
1313:       find . -type f -exec file '{}' \;
1315:       Runs `file' on every file in or below the current directory.  Notice that the braces are enclosed in single quote marks to protect them from interpretation as shell
1316:       script punctuation.  The semicolon is similarly protected by the use of a backslash, though single quotes could have been used in that case also.
1318:       find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
1319:       \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)
1321:       Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.
1323:       find $HOME -mtime 0
1325:       Search for files in your home directory which have been modified in the last twenty-four hours.  This command works this way because the time since  each  file  was
1326:       last  modified  is divided by 24 hours and any remainder is discarded.  That means that to match -mtime 0, a file will have to have a modification in the past which
1329:       find /sbin /usr/sbin -executable \! -readable -print
1331:       Search for files which are executable but not readable.
1333:       find . -perm 664
1335:       Search for files which have read and write permission for their owner, and group, but which other users can read but not write to.  Files which meet these  criteria
1336:       but have other permissions bits set (for example if someone can execute the file) will not be matched.
1338:       find . -perm -664
1340:       Search for files which have read and write permission for their owner and group, and which other users can read, without regard to the presence of any extra permis‐
1341:       sion bits (for example the executable bit).  This will match a file which has mode 0777, for example.
1343:       find . -perm /222
1345:       Search for files which are writable by somebody (their owner, or their group, or anybody else).
1347:       find . -perm /220
1348:       find . -perm /u+w,g+w
1349:       find . -perm /u=w,g=w
1351:       All three of these commands do the same thing, but the first one uses the octal representation of the file mode, and the other two use  the  symbolic  form.   These
1352:       commands  all  search  for  files  which  are  writable by either their owner or their group.  The files don't have to be writable by both the owner and group to be
1355:       find . -perm -220
1356:       find . -perm -g+w,u+w
1358:       Both these commands do the same thing; search for files which are writable by both their owner and their group.
1360:       find . -perm -444 -perm /222 \! -perm /111
1361:       find . -perm -a+r -perm /a+w \! -perm /a+x
1363:       These two commands both search for files that are readable for everybody ( -perm -444 or -perm -a+r), have at least one write bit set ( -perm /222  or  -perm  /a+w)
1364:       but are not executable for anybody ( ! -perm /111 and ! -perm /a+x respectively).
1367:       find . -name .snapshot -prune -o \( \! -name '*~' -print0 \)|
1370:       This command copies the contents of /source-dir to /dest-dir, but omits files and directories named .snapshot (and anything in them).  It also omits files or direc‐
1371:       tories whose name ends in ~, but not their contents.  The construct -prune -o \( ... -print0 \) is quite common.  The idea here is that the expression before -prune
1372:       matches  things  which are to be pruned.  However, the -prune action itself returns true, so the following -o ensures that the right hand side is evaluated only for
1373:       those directories which didn't get pruned (the contents of the pruned directories are not even visited, so their contents are irrelevant).  The  expression  on  the
1374:       right  hand side of the -o is in parentheses only for clarity.  It emphasises that the -print0 action takes place only for things that didn't have -prune applied to
1375:       them.  Because the default `and' condition between tests binds more tightly than -o, this is the default anyway, but the parentheses help to show what is going on.
1377:       find repo/ \( -exec test -d '{}'/.svn \; -or \
1381:       Given the following directory of projects and their associated SCM administrative directories, perform an efficient search for the projects' roots:
1389:       In this example, -prune prevents unnecessary descent into directories that have already been discovered (for example we do not search project3/src  because  we  al‐
1390:       ready found project3/.svn), but ensures sibling directories (project2 and project3) are found.
1392:       find /tmp -type f,d,l
1394:       Search for files, directories, and symbolic links in the directory /tmp passing these types as a comma-separated list (GNU extension), which is otherwise equivalent
1397:       find /tmp \( -type f -o -type d -o -type l \)
1400:       find exits with status 0 if all files are processed successfully, greater than 0 if errors occur.  This is deliberately a very broad description, but if the  return
1401:       value is non-zero, you should not rely on the correctness of the results of find.
1403:       When  some  error  occurs, find may stop immediately, without completing all the actions specified.  For example, some starting points may not have been examined or
1404:       some pending program invocations for -exec ... {} + or -execdir ... {} + may not have been performed.
1407:       locate(1), locatedb(5), updatedb(1), xargs(1), chmod(1), fnmatch(3), regex(7), stat(2), lstat(2), ls(1), printf(3), strftime(3), ctime(3)
1409:       The full documentation for find is maintained as a Texinfo manual.  If the info and find programs are properly installed at your site, the command info find  should
1413:       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used in filename patterns will match a leading `.', because IEEE POSIX interpretation 126
1416:       As of findutils-4.3.3, -perm /000 now matches all files instead of none.
1418:       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.
1420:       As of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when it fails.  However, find will not exit immediately.   Previously,  find's
1421:       exit status was unaffected by the failure of -delete.
1434:       -samefile              4.2.11
1444:       -fls                   4.0
1450:       The syntax -perm +MODE was removed in findutils-4.5.12, in favour of -perm /MODE.  The +MODE syntax had been deprecated since findutils-4.2.21 which was released in
1455:       The command find . -name afile -o -name bfile -print will never print afile because this is actually equivalent to find . -name afile -o \( -name  bfile  -a  -print
1456:       \).  Remember that the precedence of -a is higher than that of -o and when there is no operator specified between tests, -a is assumed.
1459:       $ find . -name *.c -print
1460:       find: paths must precede expression
1461:       find: possible unquoted pattern after predicate `-name'?
1463:       This  happens  when the shell could expand the pattern *.c to more than one file name existing in the current directory, and passing the resulting file names in the
1464:       command line to find like this:
1465:       find . -name frcode.c locate.c word_io.c -print
1466:       That command is of course not going to work, because the -name predicate allows exactly only one pattern as argument.  Instead of doing things this way, you  should
1467:       enclose  the  pattern  in quotes or escape the wildcard, thus allowing find to use the pattern with the wildcard during the search for file name matching instead of
1468:       file names expanded by the parent shell:
1469:       $ find . -name '*.c' -print
1470:       $ find . -name \*.c -print
1473:       Copyright © 1990-2019 Free Software Foundation, Inc.  License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
1474:       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.
1477:       There are security problems inherent in the behaviour that the POSIX standard specifies for find, which therefore cannot be fixed.  For example, the -exec action is
1478:       inherently insecure, and -execdir should be used instead.  Please see Finding Files for more information.
1480:       The environment variable LC_COLLATE has no effect on the -ok action.
1482:       The  best  way  to  report  a  bug is to use the form at https://savannah.gnu.org/bugs/?group=findutils.  The reason for this is that you will then be able to track
1483:       progress in fixing the problem.  Other comments about find(1) and about the findutils package in general can be sent to the bug-findutils mailing list.  To join the
1484:       list, send email to bug-findutils-request@gnu.org.
